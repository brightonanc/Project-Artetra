/*
 * Author: Brighton Ancelin
 *
 * Board data structure using bitfields.
 * Should be very fast and relatively compact for tree searches.
 */

#ifndef BOARD_H_
#define BOARD_H_

#include<cstdint>
#include<iostream>

class Board {

public:

    friend std::ostream& operator<<(std::ostream& os, const Board& board);

    /* Number of rows. */
    static const uint8_t ROWS = 3;
    /* Number of columns. */
    static const uint8_t COLS = 3;
    /* Number of pieces in a row needed to win the game. */
    static const uint8_t WIN_CHAIN = 3;
    /* Size (in bits) of the board matrix. */
    static const uint8_t MATRIX_SIZE_BITS = ((ROWS + 1) * COLS);

    /* An array that maps chain lengths to point values. */
    static const uint8_t CHAIN_TO_PTS(uint8_t chain_len);
    /* Returns a blank board. */
    static Board blank_board();

    Board() = default;
    /* Returns true if the column col is not full. */
    bool col_open(uint8_t col) const;
    /* Returns true if the next move wins for current player. */
    bool is_winning_move(uint8_t col) const;
    /* Returns the heuristic points for the board. */
    uint8_t heuristic_pts() const;
    /* Drops a piece in the specified column.
     * IMPORTANT: Doesn't check for col_open. The caller is responsible for
     * doing this! If a closed column is used, the board will be inaccurate.
     */
    void drop(uint8_t col);
    /* Writes the child board generated by dropping a piece into column col. */
    void child(uint8_t col, Board& child) const;

private:
    /* An array that maps chain lengths (starting with 2) to point values.
     * Set during runtime. Used by the function of the same name.
     */
    static uint8_t _CHAIN_TO_PTS[WIN_CHAIN - 2];

    /* Initializes the "constants" at runtime. */
    static void init_constants();
    /* Calculate the population count on a uint64_t. */
	static uint8_t popcnt(uint64_t elem);

    /* The matrix that stores the board pieces. */
    uint64_t matrix = 0;
    /* The mask of occupied spaces on the board. */
    uint64_t occupied_mask = 0;

    /* Set the bit at a position in the board to true (owned by current
     * player).
     */
    void set_pos_bit(uint8_t row, uint8_t col);
    /* Get the bit at a position in the board. */
    bool get_pos_bit(uint8_t row, uint8_t col) const;
    /* Raises the occupied mask at the specified column by one. */
    void raise_occ_mask(uint8_t col);
};

#endif /* BOARD_H_ */
